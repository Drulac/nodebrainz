{"name":"Nodebrainz","tagline":"Another musicbrainz node client","body":"# Another Musicbrainz Node Client\r\n\r\nNodeBrainz is a thin wrapper that gives you full access to the [MusicBrainz](http://musicbrainz.org/) API ([Version 2](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/)). This includes [search](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search), [lookup](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/#Lookups) and [browse](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/#Browse).\r\n\r\n\r\n\r\n### Example Usage\r\n\r\nMusicBrainz asks that you [identifying your application](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2#Identifying_your_application_to_the_MusicBrainz_Web_Service) so be sure to set the `userAgent`. You may consider following the conventions of [RFC 1945](http://tools.ietf.org/html/rfc1945#section-3.7)\r\n\r\n    var NB = require('nodebrainz');\r\n\r\n    // Initialize NodeBrainz\r\n    var nb = new NB({userAgent:'my-awesome-app/0.0.1 (+http://my-awesome-app.com)'});\r\n\r\nSetting a custom `host`, `path` and `defaultLimit` (if not set, the `defaultLimit` is 25);\r\n\r\n    var nb = new NB({host:'localhost', path:'/path/to/data/', defaultLimit:50});\r\n\r\n## MusicBrainz Entities\r\n\r\nThere are eight entities: `artist`, `label`, `recording`, `release`, `release-group`, `work`, `area`, `url`\r\n\r\n## Lookup\r\n\r\nLookups can be preformed on any of the eight entities.\r\n\r\nLookup an `artist` and include their `releases`, `release-groups` and `aliases`\r\n\r\n    nb.artist('e0140a67-e4d1-4f13-8a01-364355bee46e', {inc:'releases+release-groups+aliases'} , function(err, response){\r\n        console.log(response);\r\n    });\r\n\r\nLookup a `release-group` with no filtering or subqueries\r\n\r\n    nb.releaseGroup('df46f245-7f62-4982-9d2c-e83d7be91cbf', function(err, response){\r\n        console.log(response);\r\n    });\r\n\r\nThere are different subqueries you can include depending on the entities.\r\n\r\n- **Arists** - `recordings`, `releases`, `release-groups`, `works`\r\n- **Label** - `releases`\r\n- **Recording** - `artists`, `releases`\r\n- **Release** - `artists`, `labels`, `recordings`, `release-groups`\r\n- **Release-group** - `artists`, `releases`\r\n\r\nCheck out the some of the additional [subqueries](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2#inc.3D_arguments_which_affect_subqueries). Note that the number of linked entities returned is always limited to 25, if you need the remaining results, you will have to perform a `browse` or `search`.\r\n\r\n## Browse\r\n\r\nBrowse requests are a direct lookup of all the entities directly linked to another entity. For example, if you wanted to look up all the `release-groups` for a particularly talented artist:\r\n\r\n    nb.browse('release-group', {artist:'e0140a67-e4d1-4f13-8a01-364355bee46e'}, function(err, response){\r\n      console.log(response);\r\n    });\r\n\r\nBrowsed entities are always ordered alphabetically by gid. If you need to sort the entities, you will have to fetch all entities and sort them yourself. For pagination, set a `limit` and `offset`.\r\n\r\n    nb.browse('release-group', {artist:'e0140a67-e4d1-4f13-8a01-364355bee46e', type:'album', limit:2, offset:1}, function(err, response){\r\n      console.log(response);\r\n    });\r\n\r\nNote that `browse` requests are not `searches`, in order to browse all the `releases-groups` for an `artist`, you need to provide the `MBID` for the `artist`.\r\n\r\n## Search\r\n\r\nProvides a way to search for entities. Behind the scenes, results are provided by a search server using Lucene technology.\r\n\r\n    nb.search('artist', {artist:'tool', country:'US'}, function(err, response){\r\n        console.log(response);\r\n    });\r\n\r\n### Search Fields\r\n\r\nThere are different search fields depending on the entity.\r\n\r\n- [Artist](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Artist)\r\n- [Label](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Label)\r\n- [Recording](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Recording)\r\n- [Release](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Release)\r\n- [Release-group](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Release_Group)\r\n- [Work](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Work)\r\n- [Area](http://musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Area)\r\n\r\nSearch for all `releases` for the `artists` named *pink floyd*. Limited to 20 and offset by 5\r\n\r\n    nb.search('release', {artist:'pink floyd', limit:20, offset:5}, function(err, response){\r\n      console.log(response);\r\n    });\r\n\r\nSearch for all the studio albums for a specific artist (identified by their MBID)\r\n\r\n    nb.search('release-group', {arid:'e0140a67-e4d1-4f13-8a01-364355bee46e', type:\"album\"}, function(err, response){\r\n      console.log(response);\r\n    });\r\n\r\n\r\n\r\n## To Do\r\n\r\n- Unit tests\r\n","google":"UA-5108598-14","note":"Don't delete this file! It's used internally to help with page regeneration."}